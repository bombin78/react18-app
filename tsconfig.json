{
  "compilerOptions": {
	// Строгий режим для TS
	"strict": true,
	// Директория в которую производиться сборка
	// В нашем случае эта настройка не столь важна
	// так как сборка производиться с помощью webpack
    "outDir": "./dist/",
	// Подсвечивает все места, где не указан тип.
	// Однако это не означает, что теперь вовсе нельзя использовать any
	// Это означает лишь, что в подобных ситуациях разработчик должен
	// явно писать any
    "noImplicitAny": true,
	// Тип модульной сборки
    "module": "esNext",
	// Стандарт в который будет компилироваться код
	// es5 - для большинства браузеров подходит
    "target": "es5",
	// Для использования JSX без импорта react вместо 
	// "jsx":"react" указываем "jsx":"react-jsx"
	// Но для использования хуков импорт react всё ещё нужен
    "jsx": "react-jsx",
	// Компилятор обрабатывает не только TS файлы, но и JS файлы
    "allowJs": true,
	// Для абсолютного импорта
	"baseUrl": ".",
	"paths": {
		"*": ["./src/*"]
	},
	// moduleResolution определяет какие модули будут
    "moduleResolution": "node",
	// esModuleInterop позволяет работать с пакетами, которые
	// используют common js, как с обычными пакетами с помощью import
	// (require() module.export) = common js
	"esModuleInterop": true,
	// Если какая-либо библиотека не имеет default import, лоадеры
	// вроде ts-loader или babel-loader автоматически создают их.
	// Вместо такого импорта import * as React from 'react'
	// можно писать такой import React from 'react'
	"allowSyntheticDefaultImports": true
  },
  // Переопределение module для ts-node. Иначе будет ошибка так как выше
  // указано "module": "esNext", а ts-node работает только с "CommonJS"
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  },
  "include": [
    "./config/jest/setupTests.ts",
	"./src/**/*.ts",
    "./src/**/*.tsx",
  ],
}
